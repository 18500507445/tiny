<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.tiny</groupId>
    <artifactId>tiny</artifactId>
    <version>${revision}</version>
    <packaging>pom</packaging>

    <name>tiny</name>
    <description>spring-cloud项目</description>

    <modules>
        <!-- 公共api模块 -->
        <module>tiny-api</module>

        <!-- 公共业务模块 -->
        <module>tiny-common</module>

        <!-- 依赖管理在此模块 -->
        <module>tiny-dependencies</module>

        <!-- 公共架构模块 -->
        <module>tiny-framework</module>

        <!-- 网关模块 -->
        <module>tiny-gateway</module>

        <!-- 样例模块 -->
        <module>tiny-example</module>

        <!-- 订单模块 -->
        <module>tiny-order</module>
        <!-- 支付模块 -->
        <module>tiny-pay</module>
    </modules>

    <properties>
        <!-- tiny 当前服务全局版本控制 -->
        <revision>0.0.1-RELEASE</revision>
        <!-- tiny 当前服务common模块版本控制 -->
        <common.version>0.0.1-RELEASE</common.version>
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- 插件版本 -->
        <!-- 这个插件版本和 spring-boot版本可以同步，想想咋放到 父pom 里 -->
        <spring.boot.plugin.version>2.7.18</spring.boot.plugin.version>
        <compiler.plugin.version>3.11.0</compiler.plugin.version>
        <surefire.plugin.version>3.1.2</surefire.plugin.version>
        <resources.plugin.version>3.3.1</resources.plugin.version>
        <flatten.plugin.version>1.5.0</flatten.plugin.version>

    </properties>

    <!-- 引入dependencies模块，所有子model的父类都引用主pom就ok -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.tiny</groupId>
                <artifactId>tiny-dependencies</artifactId>
                <version>${revision}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!--分别设置local，dev环境-->
    <profiles>
        <profile>
            <id>local</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <environment>local</environment>
            </properties>
        </profile>

        <profile>
            <id>pro</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <environment>pro</environment>
            </properties>
        </profile>
    </profiles>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${compiler.plugin.version}</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>

            </plugin>

            <!-- 打包过滤测试类 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${surefire.plugin.version}</version>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>

            <!-- yml读取配置 @project.artifactId@ -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${resources.plugin.version}</version>
                <configuration>
                    <delimiters>@</delimiters>
                    <useDefaultDelimiters>false</useDefaultDelimiters>
                </configuration>
            </plugin>

            <!-- 打包管理version 将revision版本打入包里-->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>flatten-maven-plugin</artifactId>
                <version>${flatten.plugin.version}</version>

                <!-- 避免IDE将 .flattened-pom.xml 自动识别为功能模块 -->
                <configuration>
                    <updatePomFile>true</updatePomFile>
                    <flattenMode>resolveCiFriendliesOnly</flattenMode>
                </configuration>
                <executions>
                    <execution>
                        <id>flatten</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>flatten</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>flatten.clean</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
                <inherited>true</inherited>
            </plugin>

        </plugins>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <!-- yml读取配置 @project.artifactId@ -->
                <filtering>true</filtering>
                <!--排除所有的配置文件-->
                <excludes>
                    <!--使用通配符，当然可以定义多个exclude标签进行排除-->
                    <exclude>application*.yml</exclude>
                </excludes>
            </resource>

            <!--根据激活条件引入打包所需的配置和文件-->
            <resource>
                <directory>src/main/resources</directory>
                <!--引入所需环境的配置文件-->
                <filtering>true</filtering>
                <includes>
                    <include>application.yml</include>
                    <!--根据maven选择环境导入配置文件-->
                    <include>application-${environment}.yml</include>
                </includes>
            </resource>
        </resources>

    </build>


</project>